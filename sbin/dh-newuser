#!/bin/bash

# localised settings
source /dreamhack/local/settings.root

# variables to tweak
DHNAME="$dh_service_name"				# the name of the service

DOMAIN="$dh_domain"			# the domain that should be used in the URL
SSHDOMAIN="$dh_domain_ssh"			# the domain of the SSH server. If empty, this is the same as $DOMAIN.
LISTENIP="127.0.0.1"				# the IP to listen on

BASEDIR="/dreamhack"				# base directory for Dreamhack stuff
LIBDIR="$BASEDIR/lib/bin"			# support scripts
SKELDIR="$BASEDIR/var/skel"			# the directory to copy for the initial home directory

BASEHOMEDIR="$BASEDIR/home"			# the directory that home directories should live under - this can be anything you want
NONFREE=1					# copy over the dw-nonfree repository?

USERPREFIX="dh"					# the prefix used for both UNIX and database usernames
						# UNIX users get "$USERPREFIX-", database users get "$USERPREFIX_"
DHGROUP="dreamhack"				# the group all created users should be a part of - this must be created first with groupadd.
USERSHELL="/bin/bash"				# the shell the created user should get
USERHARDQUOTA=768000				# the hard quota that should be given, in blocks.
						# (needs kernel and filesystem quota support; use 0 to disable)

MYSQLUSER="$dh_db_root_username"		# a MySQL user that has permission to create users and databases
MYSQLPASSWORD="$dh_db_root_password"
DBPREFIX="dreamhack"				# the prefix for the database name
						# database user prefixes are controlled by USERPREFIX, above.
TESTDBPREFIX="test_$DBPREFIX"                   # the prefix for the test database name

# mail settings
MAILFROM="$dh_from_email_address"		# the address that the auto-generated email should come from
MAILFROMNAME="$dh_maintainer"				# the name that is used in the From field
MAILSUBJECT="Your $DHNAME has been created"	# the subject line of the email.

DHVERSION="5"					# the version of Dreamhacks we're creating

# we check the below file to make sure it exists. If it doesn't, we warn.
CHECKFILE="/dreamhack/home/7000-daily/apache/etc/httpd.pid"

# -----

if [ $UID -ne 0 ]; then
  echo "This script needs to be run as root."
  exit 1
fi

if [ "$SSHDOMAIN" == "" ]; then
  SSHDOMAIN="$DOMAIN"
fi

DELETE=0
SENDEMAIL=1
COPYDHROOT=0
GHCHECK=1
WAITFORINPUT=0

while [[ "$1" =~ ^-- ]]; do
    if [ "$1" == "--delete" ];         then DELETE=1;
  elif [ "$1" == "--no-email" ];       then SENDEMAIL=0;
  elif [ "$1" == "--copy-dhroot" ];    then COPYDHROOT=1;
  elif [ "$1" == "--no-gh-check" ];    then GHCHECK=0;   # this is for the Daily Snapshot so we don't make needless GitHub checks
  elif [ "$1" == "--no-nonfree" ];     then NONFREE=0;
  elif [ "$1" == "--wait-for-input" ]; then WAITFORINPUT=1;
  else
    echo "Switch '$1' not recognised"
    exit 1
  fi

  shift
done

USERNAME="$1"
PORT="$2"
EMAIL="$3"
PREFNAME="$4"
GITNAME="$5"
LJUSER="$6"
DWUSER="$7"

UHOME=$BASEHOMEDIR/$PORT-$USERNAME
UNIXUSER=$USERPREFIX-$USERNAME
LJHOME=$UHOME/dw

ERROR=0
if [ "$USERNAME" == "" ]; then
  echo "Please supply the desired username!"
  ERROR=1
else
  if [[ "$USERNAME" =~ ^dh- ]]; then
    echo "Supplied usernames should not start with 'dh-' - this gets added automatically!"
    ERROR=1
  else
    echo "  User: '$USERNAME'"
  fi
fi

if [ "$PORT" == "" ]; then
  echo "Please supply a port number!"
  ERROR=1
else
  echo "  Port: '$PORT'"
fi

if [ "$DELETE" == "1" ]; then
  if [ "$ERROR" == "1" ]; then
    echo "Errors detected, please correct these before running again."
    exit 1
  fi

  if [ "$EMAIL" == "force" ]; then
    echo "Forcing delete."
    FORCE=1
  fi

  if [ "$WAITFORINPUT" == "1" ]; then
    echo "Will delete this user when you press RETURN. (Ctrl-C to abort)"
    echo -n "> "
    read DUMMY
  else
    echo "Deleting this user in 10 seconds... (Ctrl-C to abort)"
    sleep 10
  fi

  echo "Begin delete process:"
  # kill their apache process, if any
  echo "Stopping apache..."
  if [ "$FORCE" == "1" ]; then
    APACHEDIR="/dreamhack/home/$PORT-$USERNAME/apache"
  else
    APACHEDIR=`$LIBDIR/get-apache-dir $PORT`
  fi
  if [ "$?" == "1" ]; then
    echo "No Apache directory in database! Aborting for sanity check."
    exit 1
  fi

  # this step needs to be run as the user because it sources the user's envvars file
  su -lc "
    source $APACHEDIR/conf/envvars
    /usr/sbin/apache2ctl -f $APACHEDIR/conf/httpd.conf -k stop
  " $UNIXUSER
  sleep 3

  echo "Removing from database..."
  $LIBDIR/delete-from-db $USERNAME $PORT $FORCE || exit 1

  if [ "$FORCE" == "1" ]; then
    echo "Deleting crontab..."
    crontab -u $UNIXUSER -r

    echo "Deleting user and homedir..."
    userdel -r $UNIXUSER

    echo "Deleting MySQL user and database..."
    # delete mysql user
    mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP USER '${USERPREFIX}_$USERNAME'@'localhost'" 

    # delete mysql databases
    mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${DBPREFIX}_$USERNAME\`"
    mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${TESTDBPREFIX}_$USERNAME\`"
    mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${TESTDBPREFIX}_${USERNAME}_c01\`"
    mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${TESTDBPREFIX}_${USERNAME}_c02\`"
  else
    APACHESLEFT=`$LIBDIR/get-apaches $USERNAME`
    if [ "$APACHESLEFT" == "" ]; then
      echo "No Apaches left."
      echo "Deleting crontab..."
      crontab -u $UNIXUSER -r

      echo "Deleting user and homedir..."
      userdel -r $UNIXUSER

      echo "Deleting MySQL user and database..."
      # delete mysql user
      mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP USER '${USERPREFIX}_$USERNAME'@'localhost'" 

      # delete mysql databases
      mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${DBPREFIX}_$USERNAME\`"
      mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${TESTDBPREFIX}_$USERNAME\`"
      mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${TESTDBPREFIX}_${USERNAME}_c01\`"
      mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "DROP DATABASE IF EXISTS \`${TESTDBPREFIX}_${USERNAME}_c02\`"
    else
      echo "Some Apaches still left, not deleting other stuff"
    fi
  fi
  echo "Updating perlbal..."
  # delete perlbal setup
  rm /home/perlbal/sites/$PORT-$USERNAME.conf
  /etc/init.d/perlbal restart

  echo "Done!"
  exit 0
fi

if [ "$EMAIL" == "" ]; then
  echo "Please supply an email address!"
  ERROR=1
else
  echo " Email: '$EMAIL'"
fi

if [ "$PREFNAME" == "" ]; then
  echo "Please supply a preferred name!"
  ERROR=1
else
  echo "  Name: '$PREFNAME'"
fi

if [ "$GITNAME" == "" ]; then
  echo "Please supply a GitHub username!"
  ERROR=1
else
  echo "GitHub: '$GITNAME'"
  if [ "$GHCHECK" == "1" ]; then
    # check to see if this GitHub account does everything we need to, as well as getting the canonically-cased username
    CGITNAME=$($LIBDIR/check-github-account <<IN
$GITNAME
IN
)
    if [ "$?" -ne 0 ]; then
      echo "GitHub account does not exist or does not have the repositories needed to continue - see above for details."
      ERROR=1
    fi
  else
    echo "Skipping GitHub check."
    CGITNAME="$GITNAME"
  fi
fi

# this is optional
if [ "$LJUSER" == "" ]; then
  LJUSER="-"
fi
echo "LJuser: '$LJUSER'"

# so is this
if [ "$DWUSER" == "" ]; then
  DWUSER="-"
fi
echo "DWuser: '$DWUSER'"
echo

if [ "$SENDEMAIL" == "0" ]; then
  echo "Will not automatically send email."
fi

perl -e 'eval { require MIME::Base64; }; exit(2) if ($@);'
if [ "$?" == "2" ]; then
  echo "This setup script requires the Perl module MIME::Base64 as part of its password creation process."
  ERROR=1
else
  echo "MIME::Base64 present :D"
fi

groupmod $DHGROUP
if [ $? -ne 0 ]; then
  echo "You need to add the '$DHGROUP' group to the system first using 'groupadd $DHGROUP'. If you want to change this group name, alter the DHGROUP variable."
  ERROR=1
else
  echo "Group '$DHGROUP' exists :D"
fi

id $UNIXUSER > /dev/null 2>/dev/null
if [ "$?" -eq 0 ]; then
  echo "A user called $UNIXUSER already exists."
  ERROR=1
else
  echo "Username '$UNIXUSER' available :D"
fi

if [ "$ERROR" == "1" ]; then
  echo "Errors detected, please correct these before running again."
  exit 1
fi

unset ERROR

if [ ! -f "$CHECKFILE" ]; then
  echo "***** The user looks good, but $CHECKFILE doesn't exist."
  echo "***** This might mean that it might not be a good idea to make new accounts right now."
  echo "***** Sleeping for 10 seconds (Ctrl-C to abort)..."
  sleep 10
  echo
fi

echo "This user will be '$UNIXUSER' and their home directory will be $UHOME"
if [ "$WAITFORINPUT" == "1" ]; then
  echo "Will set up this user when you press RETURN. (Ctrl-C to abort)"
  echo -n "> "
  read DUMMY
else
  echo "About to set up this user... hit Ctrl-C in the next 10 seconds to abort."
  sleep 10
fi
echo -n "Continuing. Time now: "
date

# create the user
echo Creating user...
useradd -c "$PREFNAME" -g $DHGROUP -K UMASK=0077 -d $UHOME -s /bin/bash $UNIXUSER 
if [ "$USERHARDQUOTA" != "0" ]; then
  setquota $UNIXUSER 0 $USERHARDQUOTA 0 0 /
fi
# create a password
PASSWORD=$(dd if=/dev/urandom bs=1 count=9 | perl -MMIME::Base64 -e 'print encode_base64(<STDIN>);')
echo "$UNIXUSER:$PASSWORD" | chpasswd

echo Changing shell...
chsh --shell $USERSHELL $UNIXUSER
echo Copying home directory...
cp -a $SKELDIR $UHOME
echo Creating a .forward...
echo $EMAIL > $UHOME/.forward    # any mail sent to this account will go to the email address in .forward.
echo Creating custom envvars file...
cat > $UHOME/apache/conf/envvars <<ENVVARS
export DREAMHACK_USER="$USERNAME"
export DREAMHACK_PORT="$PORT"
export DREAMHACK_DIR="$UHOME"
export DREAMHACK_SSHNAME="$UNIXUSER"
ENVVARS
chmod u-w $UHOME/apache/conf/envvars

echo chowning to correct user:group...
chown -R $UNIXUSER:$DHGROUP $UHOME
echo setting rwx--x--x on home directory...
chmod 711 $UHOME
echo creating initial .gitconfig file...
cat > $UHOME/.gitconfig <<CONFIG
[user]
	name = $PREFNAME
	email = $EMAIL
CONFIG
chown $UNIXUSER:$DHGROUP $UHOME/.gitconfig

if [ "$COPYDHROOT" == "1" ]; then
  echo copying and updating dhroot...
  # let's copy over the dhroot directory, update it, and use that instead of getting it from GitHub
  # NOTE: This won't work with anything other than the Daily Snapshot for now.
  su -lc "
    cp -a /dreamhack/opt/dhroot $LJHOME
    cd $LJHOME
    git pull
    cd $LJHOME/ext/dw-nonfree
    git pull
" $UNIXUSER
else
  # clone the dw-free repo from the user's GitHub account
  echo cloning dw-free...
  su -lc "
    git clone https://$CGITNAME@github.com/$CGITNAME/dw-free.git $LJHOME
    cd $LJHOME

    # and let's make it aware of the dreamwidth repository so we can grab updates later
    git remote add dreamwidth https://github.com/dreamwidth/dw-free
    git fetch dreamwidth
    # we also want to sync up with the main branches
    git branch --set-upstream develop dreamwidth/develop 
    git branch --set-upstream master dreamwidth/master

    # now map the other remote branches from our *own* repository to local branches
    REMOTEBRANCHES=\$(git branch -a | perl -ne 'if (/^  remotes\\/origin\\/([^ ]+)$/) { print \$1 }')
    for branch in \$REMOTEBRANCHES; do
      if [[ \"\$branch\" != \"develop\" && \"\$branch\" != \"master\" ]]; then
        git branch \"\$branch\" origin/\"\$branch\"
      fi
    done
  " $UNIXUSER

  if [ "$NONFREE" == "1" ]; then
    # do the same for dw-nonfree
    echo cloning dw-nonfree...
    su -lc "
      cd $LJHOME/ext
      git clone https://$CGITNAME@github.com/$CGITNAME/dw-nonfree.git
      cd dw-nonfree
      git remote add dreamwidth https://github.com/dreamwidth/dw-nonfree
      git fetch dreamwidth
      git branch --set-upstream develop dreamwidth/develop
      git branch --set-upstream master dreamwidth/master

      # now map the other remote branches from our *own* repository to local branches
      REMOTEBRANCHES=\$(git branch -a | perl -ne 'if (/^  remotes\\/origin\\/([^ ]+)$/) { print \$1 }')
      for branch in \$REMOTEBRANCHES; do
        if [[ \"\$branch\" != \"develop\" && \"\$branch\" != \"master\" ]]; then
          git branch \"\$branch\" origin/\"\$branch\"
        fi
      done
    " $UNIXUSER
  fi
fi

# put a crontab file in the user's home directory, but don't load
# it; we'll give them instructions on that later on.
cat > $UHOME/crontab-import <<CRON
LJHOME=$LJHOME

# This file defines a crontab you may wish to import. Your account
# as created has no crontab; to import this one, use the following
# command:
#   crontab ~/crontab-import
#
# Please only import the crontab if you need to.
# ---
# Errors from any of these jobs will, by default, be sent to
# the email address used to create this account. You can change
# this by editing the ~/.forward file to use another email
# address, or delete the file to use the local account mailbox
# instead.
# ---
# The crontab entries below are various utilities designed for a
# normal DW installation. You may or may not need them; as such,
# they have all been commented out on $DHNAME initially apart
# from the clean_caches one. Please uncomment only the scripts
# which you will need.

# Essential:
# format: minute, hour, day of month, month, day of week
0 12 * * * \$LJHOME/bin/ljmaint.pl clean_caches >/dev/null

# Optional, if you want birthday mail, and the random user feature:
# (you can remove parts)
#5 1 * * * \$LJHOME/bin/ljmaint.pl bdaymail build_randomuserset >/dev/null

# If you want statistics:
#30 1 * * * \$LJHOME/bin/ljmaint.pl genstats genstatspics genstats_size >/dev/null
#5 2 * * 0 \$LJHOME/bin/ljmaint.pl genstats_weekly > /dev/null

# Various tasks
#15 1 * * * \$LJHOME/bin/ljmaint.pl joinmail > /dev/null
#30 * * * * \$LJHOME/bin/ljmaint.pl synsuck > /dev/null
#5 2 * * 0 \$LJHOME/bin/ljmaint.pl memeclean > /dev/null

# If you're running a high-load site with \$LJ::BUFFER_QUERIES on,
# there's another one to install:
#*/5 * * * * \$LJHOME/bin/qbufferd.pl >/dev/null
CRON
chown $UNIXUSER:$DHGROUP $UHOME/crontab-import

# Set up MySQL
mysql -u$MYSQLUSER -p$MYSQLPASSWORD -e "
  CREATE DATABASE \`${DBPREFIX}_$USERNAME\`;
  GRANT ALL PRIVILEGES ON \`${DBPREFIX}_$USERNAME\`.* TO '${USERPREFIX}_$USERNAME'@'localhost' IDENTIFIED BY '$PASSWORD';

  CREATE DATABASE \`${TESTDBPREFIX}_$USERNAME\`;
  GRANT ALL PRIVILEGES ON \`${TESTDBPREFIX}_$USERNAME\`.* TO '${USERPREFIX}_$USERNAME'@'localhost' IDENTIFIED BY '$PASSWORD';

  CREATE DATABASE \`${TESTDBPREFIX}_${USERNAME}_c01\`;
  GRANT ALL PRIVILEGES ON \`${TESTDBPREFIX}_${USERNAME}_c01\`.* TO '${USERPREFIX}_$USERNAME'@'localhost' IDENTIFIED BY '$PASSWORD';

  CREATE DATABASE \`${TESTDBPREFIX}_${USERNAME}_c02\`;
  GRANT ALL PRIVILEGES ON \`${TESTDBPREFIX}_${USERNAME}_c02\`.* TO '${USERPREFIX}_$USERNAME'@'localhost' IDENTIFIED BY '$PASSWORD';
"

# create initial LJ config and tweak it for the installation
# since this deals with an untrusted LJHOME, I'm su'ing this even though it shouldn't cause any problems
# neither the .dir_scope removal nor the --remove-destination switch to cp(1) are absolutely necessary since
# this is being done as a user and not root, but it makes me feel better.
su -lc "
  cd $LJHOME
  mkdir ext/local{,/etc,/t}
  rm -f ext/local/.dir_scope
  echo 'highest' > ext/local/.dir_scope

  # we can't make any changes to these files or they'll show up in 'git status', so we can't move them.
  cp --remove-destination -a $LJHOME/etc/config-local.pl $LJHOME/ext/local/etc/config-local.pl
  cp --remove-destination -a $LJHOME/etc/config-private.pl $LJHOME/ext/local/etc/config-private.pl
  cp --remove-destination -a $LJHOME/t/config-test-private.pl $LJHOME/ext/local/t/config-test-private.pl
  chmod go-rwx $LJHOME/ext/local/etc/config-private.pl
  chmod go-rwx $LJHOME/ext/local/t/config-test-private.pl

  # put a README in place so that people will know what to do
  cat > $LJHOME/etc/README.txt <<'README'

Please note that changes to the files in this directory might not take effect!

This directory hosts the default configuration files from the 'dw-free' Git
repository, and on a Dreamhack these files should not be edited unless you are
working on an issue that requires a change to the default configuration files.
To change the configuration of your Dreamhack, the correct configuration files
to modify are located in:
  \$LJHOME/ext/local/etc/

The files in the above directory take precedence over the files in \$LJHOME/etc/,
and will never be overwritten. If you wish to modify a file in this directory
and it doesn't exist in \$LJHOME/ext/local/etc/, copy it there first, and then
modify the copy.

README
" $UNIXUSER

# edit the config to put the right domain in
# su'ing this for the same reason as above
su -lc "
  replace '\$DOMAIN = \"ljsite.com\"' '\$DOMAIN = \"$USERNAME.$DOMAIN\"' -- $LJHOME/ext/local/etc/config-private.pl
" $UNIXUSER

# do the config replacements for MySQL, and other stuff
# we'll call out to another script for this as it's too hard to do properly in bash
# this is potentially abuseable, so su'ing this too
su -lc "
  
  $LIBDIR/do-config-stuff $LJHOME/ext/local/etc $USERNAME $DBPREFIX $USERPREFIX $PASSWORD
" $UNIXUSER

# populate the database and run texttool, and start the server
# the first update-db command needs to be run twice due to a dbnotes check that fails
NOTES=""
su -lc "
  PS1=blah source $UHOME/.bashrc

  \$LJHOME/bin/upgrading/update-db.pl -r --innodb
  \$LJHOME/bin/upgrading/update-db.pl -r --innodb
  \$LJHOME/bin/upgrading/update-db.pl -r --cluster=all --innodb
  \$LJHOME/bin/upgrading/update-db.pl -p
  \$LJHOME/bin/upgrading/texttool.pl load

  DW_TEST=1 \$LJHOME/bin/upgrading/update-db.pl -r --innodb
  DW_TEST=1 \$LJHOME/bin/upgrading/update-db.pl -r --innodb
  DW_TEST=1 \$LJHOME/bin/upgrading/update-db.pl -r --cluster=all --innodb
  DW_TEST=1 \$LJHOME/bin/upgrading/update-db.pl -p
" $UNIXUSER

# compile the stylesheets
su -lc "
  PS1=blah source $UHOME/.bashrc

  \$LJHOME/bin/build-static.sh
" $UNIXUSER

# set up the TheSchwartz database
su -lc "
  PS1=blah source $UHOME/.bashrc
  \$LJHOME/bin/ljdb < /usr/share/doc/libtheschwartz-perl/schema.sql
  DW_TEST=1 \$LJHOME/bin/ljdb < /usr/share/doc/libtheschwartz-perl/schema.sql
" $UNIXUSER

echo "Creating .firstlogin..."
touch $UHOME/.firstlogin
chown $UNIXUSER:$DHGROUP $UHOME/.firstlogin

echo "Setting up perlbal..."
PERLBAL="CREATE POOL ${USERNAME}_pool
  POOL ${USERNAME}_pool ADD $LISTENIP:$PORT

CREATE SERVICE $USERNAME
  SET role            = reverse_proxy
  SET pool            = ${USERNAME}_pool
  SET persist_client  = on
  SET persist_backend = on
  SET verify_backend  = on
ENABLE $USERNAME

VHOST dreamhack *.$USERNAME.$DOMAIN = $USERNAME"

cat > /home/perlbal/sites/$PORT-$USERNAME.conf <<STUFF
$PERLBAL
STUFF
chown perlbal:perlbal /home/perlbal/sites/$PORT-$USERNAME.conf

$LIBDIR/cmds-to-perlbal <<STUFF
$PERLBAL
STUFF

echo "Adding user to database..."
# make a temp file to store our details
TEMPFILE=`mktemp` || exit 1
cat > $TEMPFILE <<TEMP
username=$USERNAME
ljusername=$LJUSER
dwusername=$DWUSER
sshusername=$UNIXUSER
prefname=$PREFNAME
homedir=$UHOME
email=$EMAIL
version=$DHVERSION
port=$PORT
apachedir=apache
domain=$USERNAME.$DOMAIN
githubname=$CGITNAME
TEMP
# call out to a Perl script for this
$LIBDIR/add-to-db $TEMPFILE
rm $TEMPFILE

#if [ "$DOMAIN" != "$WEBDOMAIN" ]; then
#  echo "Setting up perlbal on the old server..."
#  OLDPERLBAL="CREATE POOL newserv_${USERNAME}_pool
#    POOL newserv_${USERNAME}_pool ADD 67.207.129.41:80
#
#  CREATE SERVICE newserv_$USERNAME
#    SET role            = reverse_proxy
#    SET pool            = newserv_${USERNAME}_pool
#    SET persist_client  = on
#    SET persist_backend = on
#    SET verify_backend  = off
#  ENABLE newserv_$USERNAME
#
#  VHOST dreamhack *.$USERNAME.$DOMAIN = newserv_$USERNAME"
#
#  FILE=`mktemp`
#  echo "$OLDPERLBAL" > $FILE
#  OLDFILE=`ssh oldhack-transfer \"mktemp\"`
#  scp "$FILE" "oldhack-transfer:$OLDFILE"
#  OLDCONF="/home/perlbal/sites/new-$PORT-$USERNAME.conf"
#  POSSEXIST="/home/perlbal/sites/$PORT-$USERNAME.conf"
#  ssh oldhack-transfer "
#mv \"$OLDFILE\" $OLDCONF
#chown perlbal:perlbal $OLDCONF
#mv $POSSEXIST $POSSEXIST.bak 2>/dev/null
#/etc/init.d/perlbal restart
#"

#  cat > /home/perlbal/sites/$PORT-$USERNAME.conf <<STUFF
#$PERLBAL
#STUFF
#  chown perlbal:perlbal /home/perlbal/sites/$PORT-$USERNAME.conf
#
#  $LIBDIR/cmds-to-perlbal <<STUFF
#$PERLBAL
#STUFF
#fi
if [ "$SSHDOMAIN" != "$DOMAIN" ]; then
  NOTES="

Please note that the SSH/SFTP server to use, \"$SSHDOMAIN\",
is not the same as the domain in your URL, \"$DOMAIN\"!$NOTES"
fi

echo -n "All done! Finished at: "
date

if [ "$SENDEMAIL" == "1" ]; then
  echo "About to send email, waiting 2 seconds in case of Ctrl-C..."
  sleep 2
  echo "Sending email..."
  EMAILMSG="Hi $PREFNAME!

Your $DHNAME installation has been set up. Its allocated URL is:

  http://www.$USERNAME.$DOMAIN/

Please note that your Dreamhack has not been started, so the above
URL will not work immediately. In order to start it, you must log
into the SSH server at $SSHDOMAIN with the following
credentials, and type 'start-apache' at the prompt:
  Username: $UNIXUSER
  Password: $PASSWORD

For reference, your home directory is $UHOME.$NOTES

The rest of this email is duplicated in the README file in your home
directory, for your convenience.

=========="

  sendmail -f $MAILFROM $EMAIL <<EMAIL
From: "$MAILFROMNAME" <$MAILFROM>
To: "$USERNAME" <$EMAIL>
Subject: $MAILSUBJECT

$EMAILMSG
`cat $UHOME/README`
EMAIL
  echo "Sent!"
else
  echo "Not sending email."
fi

